// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// be/be_codegen.cpp:155

#ifndef _TAO_IDL_REMOTESERVERSSETC_H_
#define _TAO_IDL_REMOTESERVERSSETC_H_


#include "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Environment.h"
#include "tao/Object.h"
#include "tao/Managed_Types.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/VarOut_T.h"
#include "tao/Versioned_Namespace.h"

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

// TAO_IDL - Generated from 
// be/be_visitor_root/root_ch.cpp:62
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  class Collocation_Proxy_Broker;
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:49

namespace RemoteServersSet
{
  
  // TAO_IDL - Generated from
  // be/be_visitor_exception/exception_ch.cpp:53

#if !defined (_REMOTESERVERSSET_ERROR_CH_)
#define _REMOTESERVERSSET_ERROR_CH_
  
  class  error : public ::CORBA::UserException
  {
  public:
    
    ::CORBA::Long code;
    error (void);
    error (const error &);
    ~error (void);

    error &operator= (const error &);
    
    static void _tao_any_destructor (void *);
    
    static error *_downcast ( ::CORBA::Exception *);
    static const error *_downcast ( ::CORBA::Exception const *);
    
    static ::CORBA::Exception *_alloc (void);
    
    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (
        TAO_OutputCDR &
        ACE_ENV_ARG_DECL
      ) const;
    
    virtual void _tao_decode (
        TAO_InputCDR &
        ACE_ENV_ARG_DECL
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_exception/exception_ctor.cpp:66
    
    error (
        ::CORBA::Long _tao_code
      );
    
    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };
  
  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:49
  
  extern  ::CORBA::TypeCode_ptr const _tc_error;

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_interface.cpp:646

#if !defined (_REMOTESERVERSSET_MANAGEMENT__VAR_OUT_CH_)
#define _REMOTESERVERSSET_MANAGEMENT__VAR_OUT_CH_
  
  class Management;
  typedef Management *Management_ptr;
  
  typedef
    TAO_Objref_Var_T<
        Management
      >
    Management_var;
  
  typedef
    TAO_Objref_Out_T<
        Management
      >
    Management_out;

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:54

#if !defined (_REMOTESERVERSSET_MANAGEMENT_CH_)
#define _REMOTESERVERSSET_MANAGEMENT_CH_
  
  class  Management
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<Management>;
    typedef Management_ptr _ptr_type;
    typedef Management_var _var_type;
    
    // The static operations.
    static Management_ptr _duplicate (Management_ptr obj);
    
    static void _tao_release (Management_ptr obj);
    
    static Management_ptr _narrow (
        ::CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );
    
    static Management_ptr _unchecked_narrow (
        ::CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );
    
    static Management_ptr _nil (void)
    {
      return static_cast<Management_ptr> (0);
    }
    
    static void _tao_any_destructor (void *);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual char * currentServer (
        
      )
      ACE_THROW_SPEC ((
        ::CORBA::SystemException
      ));
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual void currentServer (
        const char * currentServer
      )
      ACE_THROW_SPEC ((
        ::CORBA::SystemException
      ));
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual ::CORBA::Boolean autoMoveMode (
        
      )
      ACE_THROW_SPEC ((
        ::CORBA::SystemException
      ));
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual void autoMoveMode (
        ::CORBA::Boolean autoMoveMode
      )
      ACE_THROW_SPEC ((
        ::CORBA::SystemException
      ));
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual ::CORBA::Long currentCommStatus (
        
      )
      ACE_THROW_SPEC ((
        ::CORBA::SystemException
      ));
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual ::CORBA::Long start (
        
      )
      ACE_THROW_SPEC ((
        ::CORBA::SystemException
      ));
    
    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:214
    
    virtual ::CORBA::Boolean _is_a (
        const char *type_id
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );
    
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_Management_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    Management (void);
    
    // These methods travese the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void RemoteServersSet_Management_setup_collocation (void);
    
    // Concrete non-local interface only.
    Management (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core = 0
      );
    
    // Non-local interface only.
    Management (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = 0,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0
      );
    
    virtual ~Management (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    Management (const Management &);
    
    void operator= (const Management &);
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:49
  
  extern  ::CORBA::TypeCode_ptr const _tc_Management;
  
  // TAO_IDL - Generated from
  // be/be_type.cpp:258
  
  struct Event;
  
  typedef
    TAO_Var_Var_T<
        Event
      >
    Event_var;
  
  typedef
    TAO_Out_T<
        Event,
        Event_var
      >
    Event_out;
  
  // TAO_IDL - Generated from
  // be/be_visitor_structure/structure_ch.cpp:57
  
  struct  Event
  {
    typedef Event_var _var_type;
    
    static void _tao_any_destructor (void *);
    ::CORBA::Long status;
    TAO_String_Manager message;
  };
  
  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:49
  
  extern  ::CORBA::TypeCode_ptr const _tc_Event;
  
  // TAO_IDL - Generated from
  // be/be_interface.cpp:646

#if !defined (_REMOTESERVERSSET_EVENTLISTENER__VAR_OUT_CH_)
#define _REMOTESERVERSSET_EVENTLISTENER__VAR_OUT_CH_
  
  class EventListener;
  typedef EventListener *EventListener_ptr;
  
  typedef
    TAO_Objref_Var_T<
        EventListener
      >
    EventListener_var;
  
  typedef
    TAO_Objref_Out_T<
        EventListener
      >
    EventListener_out;

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:54

#if !defined (_REMOTESERVERSSET_EVENTLISTENER_CH_)
#define _REMOTESERVERSSET_EVENTLISTENER_CH_
  
  class  EventListener
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<EventListener>;
    typedef EventListener_ptr _ptr_type;
    typedef EventListener_var _var_type;
    
    // The static operations.
    static EventListener_ptr _duplicate (EventListener_ptr obj);
    
    static void _tao_release (EventListener_ptr obj);
    
    static EventListener_ptr _narrow (
        ::CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );
    
    static EventListener_ptr _unchecked_narrow (
        ::CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );
    
    static EventListener_ptr _nil (void)
    {
      return static_cast<EventListener_ptr> (0);
    }
    
    static void _tao_any_destructor (void *);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual void notifyEvent (
        const ::RemoteServersSet::Event & newEvent
      )
      ACE_THROW_SPEC ((
        ::CORBA::SystemException
      ));
    
    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:214
    
    virtual ::CORBA::Boolean _is_a (
        const char *type_id
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );
    
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_EventListener_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    EventListener (void);
    
    // These methods travese the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void RemoteServersSet_EventListener_setup_collocation (void);
    
    // Concrete non-local interface only.
    EventListener (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core = 0
      );
    
    // Non-local interface only.
    EventListener (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = 0,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0
      );
    
    virtual ~EventListener (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    EventListener (const EventListener &);
    
    void operator= (const EventListener &);
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:49
  
  extern  ::CORBA::TypeCode_ptr const _tc_EventListener;
  
  // TAO_IDL - Generated from
  // be/be_interface.cpp:646

#if !defined (_REMOTESERVERSSET_EVENTSUBSCRIBER__VAR_OUT_CH_)
#define _REMOTESERVERSSET_EVENTSUBSCRIBER__VAR_OUT_CH_
  
  class EventSubscriber;
  typedef EventSubscriber *EventSubscriber_ptr;
  
  typedef
    TAO_Objref_Var_T<
        EventSubscriber
      >
    EventSubscriber_var;
  
  typedef
    TAO_Objref_Out_T<
        EventSubscriber
      >
    EventSubscriber_out;

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:54

#if !defined (_REMOTESERVERSSET_EVENTSUBSCRIBER_CH_)
#define _REMOTESERVERSSET_EVENTSUBSCRIBER_CH_
  
  class  EventSubscriber
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<EventSubscriber>;
    typedef EventSubscriber_ptr _ptr_type;
    typedef EventSubscriber_var _var_type;
    
    // The static operations.
    static EventSubscriber_ptr _duplicate (EventSubscriber_ptr obj);
    
    static void _tao_release (EventSubscriber_ptr obj);
    
    static EventSubscriber_ptr _narrow (
        ::CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );
    
    static EventSubscriber_ptr _unchecked_narrow (
        ::CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );
    
    static EventSubscriber_ptr _nil (void)
    {
      return static_cast<EventSubscriber_ptr> (0);
    }
    
    static void _tao_any_destructor (void *);
    
    // TAO_IDL - Generated from
    // be/be_visitor_constant/constant_ch.cpp:52
    
    static const CORBA::ULong errorsEventFilters = 1U;
    
    // TAO_IDL - Generated from
    // be/be_visitor_constant/constant_ch.cpp:52
    
    static const CORBA::ULong warningsEventFilters = 2U;
    
    // TAO_IDL - Generated from
    // be/be_visitor_constant/constant_ch.cpp:52
    
    static const CORBA::ULong informationEventFilters = 4U;
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual ::CORBA::ULong subscribe (
        ::RemoteServersSet::EventListener_ptr clientsInterface,
        ::CORBA::ULong filter
      )
      ACE_THROW_SPEC ((
        ::CORBA::SystemException
      ));
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual ::CORBA::ULong unsubscribe (
        ::RemoteServersSet::EventListener_ptr clientsInterface
      )
      ACE_THROW_SPEC ((
        ::CORBA::SystemException
      ));
    
    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:214
    
    virtual ::CORBA::Boolean _is_a (
        const char *type_id
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );
    
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_EventSubscriber_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    EventSubscriber (void);
    
    // These methods travese the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void RemoteServersSet_EventSubscriber_setup_collocation (void);
    
    // Concrete non-local interface only.
    EventSubscriber (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core = 0
      );
    
    // Non-local interface only.
    EventSubscriber (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = 0,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0
      );
    
    virtual ~EventSubscriber (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    EventSubscriber (const EventSubscriber &);
    
    void operator= (const EventSubscriber &);
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:49
  
  extern  ::CORBA::TypeCode_ptr const _tc_EventSubscriber;

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:78

} // module RemoteServersSet

// Proxy Broker Factory function pointer declarations.

// TAO_IDL - Generated from
// be/be_visitor_root/root.cpp:139

extern 
TAO::Collocation_Proxy_Broker *
(*RemoteServersSet__TAO_Management_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  );

extern 
TAO::Collocation_Proxy_Broker *
(*RemoteServersSet__TAO_EventListener_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  );

extern 
TAO::Collocation_Proxy_Broker *
(*RemoteServersSet__TAO_EventSubscriber_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  );

// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:62
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Traits specializations.
namespace TAO
{

#if !defined (_REMOTESERVERSSET_MANAGEMENT__TRAITS_)
#define _REMOTESERVERSSET_MANAGEMENT__TRAITS_
  
  template<>
  struct  Objref_Traits< ::RemoteServersSet::Management>
  {
    static ::RemoteServersSet::Management_ptr duplicate (
        ::RemoteServersSet::Management_ptr
      );
    static void release (
        ::RemoteServersSet::Management_ptr
      );
    static ::RemoteServersSet::Management_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::RemoteServersSet::Management_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */

#if !defined (_REMOTESERVERSSET_EVENTLISTENER__TRAITS_)
#define _REMOTESERVERSSET_EVENTLISTENER__TRAITS_
  
  template<>
  struct  Objref_Traits< ::RemoteServersSet::EventListener>
  {
    static ::RemoteServersSet::EventListener_ptr duplicate (
        ::RemoteServersSet::EventListener_ptr
      );
    static void release (
        ::RemoteServersSet::EventListener_ptr
      );
    static ::RemoteServersSet::EventListener_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::RemoteServersSet::EventListener_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */

#if !defined (_REMOTESERVERSSET_EVENTSUBSCRIBER__TRAITS_)
#define _REMOTESERVERSSET_EVENTSUBSCRIBER__TRAITS_
  
  template<>
  struct  Objref_Traits< ::RemoteServersSet::EventSubscriber>
  {
    static ::RemoteServersSet::EventSubscriber_ptr duplicate (
        ::RemoteServersSet::EventSubscriber_ptr
      );
    static void release (
        ::RemoteServersSet::EventSubscriber_ptr
      );
    static ::RemoteServersSet::EventSubscriber_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::RemoteServersSet::EventSubscriber_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_exception/any_op_ch.cpp:53
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 void operator<<= (::CORBA::Any &, const RemoteServersSet::error &); // copying version
 void operator<<= (::CORBA::Any &, RemoteServersSet::error*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RemoteServersSet::error *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const RemoteServersSet::error *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:54



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RemoteServersSet
{
   void operator<<= ( ::CORBA::Any &, Management_ptr); // copying
   void operator<<= ( ::CORBA::Any &, Management_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Management_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, RemoteServersSet::Management_ptr); // copying
 void operator<<= (::CORBA::Any &, RemoteServersSet::Management_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RemoteServersSet::Management_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:53


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const RemoteServersSet::Event &); // copying version
 void operator<<= (::CORBA::Any &, RemoteServersSet::Event*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RemoteServersSet::Event *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const RemoteServersSet::Event *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:54



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RemoteServersSet
{
   void operator<<= ( ::CORBA::Any &, EventListener_ptr); // copying
   void operator<<= ( ::CORBA::Any &, EventListener_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, EventListener_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, RemoteServersSet::EventListener_ptr); // copying
 void operator<<= (::CORBA::Any &, RemoteServersSet::EventListener_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RemoteServersSet::EventListener_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:54



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RemoteServersSet
{
   void operator<<= ( ::CORBA::Any &, EventSubscriber_ptr); // copying
   void operator<<= ( ::CORBA::Any &, EventSubscriber_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, EventSubscriber_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, RemoteServersSet::EventSubscriber_ptr); // copying
 void operator<<= (::CORBA::Any &, RemoteServersSet::EventSubscriber_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RemoteServersSet::EventSubscriber_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_ch.cpp:52
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const RemoteServersSet::error &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, RemoteServersSet::error &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:55


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const RemoteServersSet::Management_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, RemoteServersSet::Management_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:54


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const RemoteServersSet::Event &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, RemoteServersSet::Event &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:55


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const RemoteServersSet::EventListener_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, RemoteServersSet::EventListener_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:55


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const RemoteServersSet::EventSubscriber_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, RemoteServersSet::EventSubscriber_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1093
#if defined (__ACE_INLINE__)
#include "remoteServersSetC.inl"
#endif /* defined INLINE */

#endif /* ifndef */


