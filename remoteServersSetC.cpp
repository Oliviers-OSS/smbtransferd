// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// be/be_codegen.cpp:283


#include "remoteServersSetC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Object_Argument_T.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/UB_String_Arguments.h"
#include "tao/Var_Size_Argument_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "remoteServersSetC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:71
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Arg traits specializations.
namespace TAO
{
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:903

#if !defined (_REMOTESERVERSSET_EVENT__ARG_TRAITS_)
#define _REMOTESERVERSSET_EVENT__ARG_TRAITS_
  
  template<>
  class Arg_Traits<RemoteServersSet::Event>
    : public
        Var_Size_Arg_Traits_T<
            RemoteServersSet::Event,
            RemoteServersSet::Event_var,
            RemoteServersSet::Event_out,
            TAO::Any_Insert_Policy_Stream <RemoteServersSet::Event>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:123

#if !defined (_REMOTESERVERSSET_EVENTLISTENER__ARG_TRAITS_)
#define _REMOTESERVERSSET_EVENTLISTENER__ARG_TRAITS_
  
  template<>
  class  Arg_Traits<RemoteServersSet::EventListener>
    : public
        Object_Arg_Traits_T<
            RemoteServersSet::EventListener_ptr,
            RemoteServersSet::EventListener_var,
            RemoteServersSet::EventListener_out,
            TAO::Objref_Traits<RemoteServersSet::EventListener>,
            TAO::Any_Insert_Policy_Stream <RemoteServersSet::EventListener_ptr>
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from 
// be/be_visitor_exception/exception_cs.cpp:63

RemoteServersSet::error::error (void)
  : ::CORBA::UserException (
        "IDL:RemoteServersSet/error:1.0",
        "error"
      )
{
}

RemoteServersSet::error::~error (void)
{
}

RemoteServersSet::error::error (const ::RemoteServersSet::error &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->code = _tao_excp.code;
}

RemoteServersSet::error&
RemoteServersSet::error::operator= (const ::RemoteServersSet::error &_tao_excp)
{
  this->ACE_NESTED_CLASS ( ::CORBA, UserException)::operator= (_tao_excp);
  this->code = _tao_excp.code;
  return *this;
}

void RemoteServersSet::error::_tao_any_destructor (void *_tao_void_pointer)
{
  error *_tao_tmp_pointer =
    static_cast<error *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

RemoteServersSet::error *
RemoteServersSet::error::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<error *> (_tao_excp);
}

const RemoteServersSet::error *
RemoteServersSet::error::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const error *> (_tao_excp);
}

::CORBA::Exception *RemoteServersSet::error::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::RemoteServersSet::error, 0);
  return retval;
}

::CORBA::Exception *
RemoteServersSet::error::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::RemoteServersSet::error (*this),
      0
    );
  return result;
}

void RemoteServersSet::error::_raise (void) const
{
  TAO_RAISE (*this);
}

void RemoteServersSet::error::_tao_encode (
    TAO_OutputCDR &cdr
    ACE_ENV_ARG_DECL
  ) const
{
  if (cdr << *this)
    {
      return;
    }
  
  ACE_THROW ( ::CORBA::MARSHAL ());
}

void RemoteServersSet::error::_tao_decode (
    TAO_InputCDR &cdr
    ACE_ENV_ARG_DECL
  )
{
  if (cdr >> *this)
    {
      return;
    }
  
  ACE_THROW ( ::CORBA::MARSHAL ());
}



// TAO_IDL - Generated from
// be/be_visitor_exception/exception_ctor.cpp:66

RemoteServersSet::error::error (
    ::CORBA::Long _tao_code
  )
  : ::CORBA::UserException (
        "IDL:RemoteServersSet/error:1.0",
        "error"
      )
{
  this->code = _tao_code;
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr RemoteServersSet::error::_tao_type (void) const
{
  return ::RemoteServersSet::_tc_error;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:89

static TAO::TypeCode::Struct_Field<char const *, ::CORBA::TypeCode_ptr const *> const _tao_fields_RemoteServersSet_error[] =
  {
    { "code", &CORBA::_tc_long }
    
  };
static TAO::TypeCode::Struct<char const *,
                      ::CORBA::TypeCode_ptr const *,
                      TAO::TypeCode::Struct_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                      TAO::Null_RefCount_Policy>
  _tao_tc_RemoteServersSet_error (
    ::CORBA::tk_except,
    "IDL:RemoteServersSet/error:1.0",
    "error",
    _tao_fields_RemoteServersSet_error,
    1);
  
namespace RemoteServersSet
{
  ::CORBA::TypeCode_ptr const _tc_error =
    &_tao_tc_RemoteServersSet_error;
}



// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:60

// Traits specializations for RemoteServersSet::Management.

RemoteServersSet::Management_ptr
TAO::Objref_Traits<RemoteServersSet::Management>::duplicate (
    RemoteServersSet::Management_ptr p
  )
{
  return RemoteServersSet::Management::_duplicate (p);
}

void
TAO::Objref_Traits<RemoteServersSet::Management>::release (
    RemoteServersSet::Management_ptr p
  )
{
  CORBA::release (p);
}

RemoteServersSet::Management_ptr
TAO::Objref_Traits<RemoteServersSet::Management>::nil (void)
{
  return RemoteServersSet::Management::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<RemoteServersSet::Management>::marshal (
    const RemoteServersSet::Management_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*RemoteServersSet__TAO_Management_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

char * RemoteServersSet::Management::currentServer (
    
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS ( ::CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Management_Proxy_Broker_ == 0)
    {
      RemoteServersSet_Management_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CORBA::Char *>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_currentServer",
      18,
      this->the_TAO_Management_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

void RemoteServersSet::Management::currentServer (
    const char * currentServer
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS ( ::CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Management_Proxy_Broker_ == 0)
    {
      RemoteServersSet_Management_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Char *>::in_arg_val _tao_currentServer (currentServer);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_currentServer
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "_set_currentServer",
      18,
      this->the_TAO_Management_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

::CORBA::Boolean RemoteServersSet::Management::autoMoveMode (
    
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS ( ::CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Management_Proxy_Broker_ == 0)
    {
      RemoteServersSet_Management_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_autoMoveMode",
      17,
      this->the_TAO_Management_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

void RemoteServersSet::Management::autoMoveMode (
    ::CORBA::Boolean autoMoveMode
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS ( ::CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Management_Proxy_Broker_ == 0)
    {
      RemoteServersSet_Management_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_val _tao_autoMoveMode (autoMoveMode);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_autoMoveMode
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "_set_autoMoveMode",
      17,
      this->the_TAO_Management_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

::CORBA::Long RemoteServersSet::Management::currentCommStatus (
    
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS ( ::CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Management_Proxy_Broker_ == 0)
    {
      RemoteServersSet_Management_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_currentCommStatus",
      22,
      this->the_TAO_Management_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

::CORBA::Long RemoteServersSet::Management::start (
    
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS ( ::CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Management_Proxy_Broker_ == 0)
    {
      RemoteServersSet_Management_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "start",
      5,
      this->the_TAO_Management_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

RemoteServersSet::Management::Management (void)
 : the_TAO_Management_Proxy_Broker_ (0)
{
  this->RemoteServersSet_Management_setup_collocation ();
}

void
RemoteServersSet::Management::RemoteServersSet_Management_setup_collocation ()
{
  if (::RemoteServersSet__TAO_Management_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_Management_Proxy_Broker_ =
        ::RemoteServersSet__TAO_Management_Proxy_Broker_Factory_function_pointer (this);
    }
}

RemoteServersSet::Management::~Management (void)
{}

void 
RemoteServersSet::Management::_tao_any_destructor (void *_tao_void_pointer)
{
  Management *_tao_tmp_pointer =
    static_cast<Management *> (_tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

RemoteServersSet::Management_ptr
RemoteServersSet::Management::_narrow (
    ::CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<Management>::narrow (
        _tao_objref,
        "IDL:RemoteServersSet/Management:1.0",
        RemoteServersSet__TAO_Management_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

RemoteServersSet::Management_ptr
RemoteServersSet::Management::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<Management>::unchecked_narrow (
        _tao_objref,
        "IDL:RemoteServersSet/Management:1.0",
        RemoteServersSet__TAO_Management_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

RemoteServersSet::Management_ptr
RemoteServersSet::Management::_duplicate (Management_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
RemoteServersSet::Management::_tao_release (Management_ptr obj)
{
  CORBA::release (obj);
}

::CORBA::Boolean
RemoteServersSet::Management::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          value,
          "IDL:RemoteServersSet/Management:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->ACE_NESTED_CLASS ( ::CORBA, Object)::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

const char* RemoteServersSet::Management::_interface_repository_id (void) const
{
  return "IDL:RemoteServersSet/Management:1.0";
}

::CORBA::Boolean
RemoteServersSet::Management::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:76

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_RemoteServersSet_Management (
    ::CORBA::tk_objref,
    "IDL:RemoteServersSet/Management:1.0",
    "Management");
  
namespace RemoteServersSet
{
  ::CORBA::TypeCode_ptr const _tc_Management =
    &_tao_tc_RemoteServersSet_Management;
}



// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:89

static TAO::TypeCode::Struct_Field<char const *, ::CORBA::TypeCode_ptr const *> const _tao_fields_RemoteServersSet_Event[] =
  {
    { "status", &CORBA::_tc_long },
    { "message", &CORBA::_tc_string }
    
  };
static TAO::TypeCode::Struct<char const *,
                      ::CORBA::TypeCode_ptr const *,
                      TAO::TypeCode::Struct_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                      TAO::Null_RefCount_Policy>
  _tao_tc_RemoteServersSet_Event (
    ::CORBA::tk_struct,
    "IDL:RemoteServersSet/Event:1.0",
    "Event",
    _tao_fields_RemoteServersSet_Event,
    2);
  
namespace RemoteServersSet
{
  ::CORBA::TypeCode_ptr const _tc_Event =
    &_tao_tc_RemoteServersSet_Event;
}



// TAO_IDL - Generated from 
// be/be_visitor_structure/structure_cs.cpp:66

void 
RemoteServersSet::Event::_tao_any_destructor (
    void *_tao_void_pointer
  )
{
  Event *_tao_tmp_pointer =
    static_cast<Event *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:60

// Traits specializations for RemoteServersSet::EventListener.

RemoteServersSet::EventListener_ptr
TAO::Objref_Traits<RemoteServersSet::EventListener>::duplicate (
    RemoteServersSet::EventListener_ptr p
  )
{
  return RemoteServersSet::EventListener::_duplicate (p);
}

void
TAO::Objref_Traits<RemoteServersSet::EventListener>::release (
    RemoteServersSet::EventListener_ptr p
  )
{
  CORBA::release (p);
}

RemoteServersSet::EventListener_ptr
TAO::Objref_Traits<RemoteServersSet::EventListener>::nil (void)
{
  return RemoteServersSet::EventListener::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<RemoteServersSet::EventListener>::marshal (
    const RemoteServersSet::EventListener_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*RemoteServersSet__TAO_EventListener_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

void RemoteServersSet::EventListener::notifyEvent (
    const ::RemoteServersSet::Event & newEvent
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS ( ::CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_EventListener_Proxy_Broker_ == 0)
    {
      RemoteServersSet_EventListener_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::RemoteServersSet::Event>::in_arg_val _tao_newEvent (newEvent);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_newEvent
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "notifyEvent",
      11,
      this->the_TAO_EventListener_Proxy_Broker_,
      TAO::TAO_ONEWAY_INVOCATION
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
}

RemoteServersSet::EventListener::EventListener (void)
 : the_TAO_EventListener_Proxy_Broker_ (0)
{
  this->RemoteServersSet_EventListener_setup_collocation ();
}

void
RemoteServersSet::EventListener::RemoteServersSet_EventListener_setup_collocation ()
{
  if (::RemoteServersSet__TAO_EventListener_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_EventListener_Proxy_Broker_ =
        ::RemoteServersSet__TAO_EventListener_Proxy_Broker_Factory_function_pointer (this);
    }
}

RemoteServersSet::EventListener::~EventListener (void)
{}

void 
RemoteServersSet::EventListener::_tao_any_destructor (void *_tao_void_pointer)
{
  EventListener *_tao_tmp_pointer =
    static_cast<EventListener *> (_tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

RemoteServersSet::EventListener_ptr
RemoteServersSet::EventListener::_narrow (
    ::CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<EventListener>::narrow (
        _tao_objref,
        "IDL:RemoteServersSet/EventListener:1.0",
        RemoteServersSet__TAO_EventListener_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

RemoteServersSet::EventListener_ptr
RemoteServersSet::EventListener::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<EventListener>::unchecked_narrow (
        _tao_objref,
        "IDL:RemoteServersSet/EventListener:1.0",
        RemoteServersSet__TAO_EventListener_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

RemoteServersSet::EventListener_ptr
RemoteServersSet::EventListener::_duplicate (EventListener_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
RemoteServersSet::EventListener::_tao_release (EventListener_ptr obj)
{
  CORBA::release (obj);
}

::CORBA::Boolean
RemoteServersSet::EventListener::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          value,
          "IDL:RemoteServersSet/EventListener:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->ACE_NESTED_CLASS ( ::CORBA, Object)::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

const char* RemoteServersSet::EventListener::_interface_repository_id (void) const
{
  return "IDL:RemoteServersSet/EventListener:1.0";
}

::CORBA::Boolean
RemoteServersSet::EventListener::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:76

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_RemoteServersSet_EventListener (
    ::CORBA::tk_objref,
    "IDL:RemoteServersSet/EventListener:1.0",
    "EventListener");
  
namespace RemoteServersSet
{
  ::CORBA::TypeCode_ptr const _tc_EventListener =
    &_tao_tc_RemoteServersSet_EventListener;
}



// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:60

// Traits specializations for RemoteServersSet::EventSubscriber.

RemoteServersSet::EventSubscriber_ptr
TAO::Objref_Traits<RemoteServersSet::EventSubscriber>::duplicate (
    RemoteServersSet::EventSubscriber_ptr p
  )
{
  return RemoteServersSet::EventSubscriber::_duplicate (p);
}

void
TAO::Objref_Traits<RemoteServersSet::EventSubscriber>::release (
    RemoteServersSet::EventSubscriber_ptr p
  )
{
  CORBA::release (p);
}

RemoteServersSet::EventSubscriber_ptr
TAO::Objref_Traits<RemoteServersSet::EventSubscriber>::nil (void)
{
  return RemoteServersSet::EventSubscriber::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<RemoteServersSet::EventSubscriber>::marshal (
    const RemoteServersSet::EventSubscriber_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*RemoteServersSet__TAO_EventSubscriber_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// be/be_visitor_constant/constant_cs.cpp:71

#ifndef _MSC_VER
  const CORBA::ULong RemoteServersSet::EventSubscriber::errorsEventFilters;
#endif // ifndef _MSC_VER

// TAO_IDL - Generated from
// be/be_visitor_constant/constant_cs.cpp:71

#ifndef _MSC_VER
  const CORBA::ULong RemoteServersSet::EventSubscriber::warningsEventFilters;
#endif // ifndef _MSC_VER

// TAO_IDL - Generated from
// be/be_visitor_constant/constant_cs.cpp:71

#ifndef _MSC_VER
  const CORBA::ULong RemoteServersSet::EventSubscriber::informationEventFilters;
#endif // ifndef _MSC_VER

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

::CORBA::ULong RemoteServersSet::EventSubscriber::subscribe (
    ::RemoteServersSet::EventListener_ptr clientsInterface,
    ::CORBA::ULong filter
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS ( ::CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_EventSubscriber_Proxy_Broker_ == 0)
    {
      RemoteServersSet_EventSubscriber_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CORBA::ULong>::ret_val _tao_retval;
  TAO::Arg_Traits< ::RemoteServersSet::EventListener>::in_arg_val _tao_clientsInterface (clientsInterface);
  TAO::Arg_Traits< ::CORBA::ULong>::in_arg_val _tao_filter (filter);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_clientsInterface,
      &_tao_filter
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "subscribe",
      9,
      this->the_TAO_EventSubscriber_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

::CORBA::ULong RemoteServersSet::EventSubscriber::unsubscribe (
    ::RemoteServersSet::EventListener_ptr clientsInterface
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS ( ::CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_EventSubscriber_Proxy_Broker_ == 0)
    {
      RemoteServersSet_EventSubscriber_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CORBA::ULong>::ret_val _tao_retval;
  TAO::Arg_Traits< ::RemoteServersSet::EventListener>::in_arg_val _tao_clientsInterface (clientsInterface);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_clientsInterface
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "unsubscribe",
      11,
      this->the_TAO_EventSubscriber_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

RemoteServersSet::EventSubscriber::EventSubscriber (void)
 : the_TAO_EventSubscriber_Proxy_Broker_ (0)
{
  this->RemoteServersSet_EventSubscriber_setup_collocation ();
}

void
RemoteServersSet::EventSubscriber::RemoteServersSet_EventSubscriber_setup_collocation ()
{
  if (::RemoteServersSet__TAO_EventSubscriber_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_EventSubscriber_Proxy_Broker_ =
        ::RemoteServersSet__TAO_EventSubscriber_Proxy_Broker_Factory_function_pointer (this);
    }
}

RemoteServersSet::EventSubscriber::~EventSubscriber (void)
{}

void 
RemoteServersSet::EventSubscriber::_tao_any_destructor (void *_tao_void_pointer)
{
  EventSubscriber *_tao_tmp_pointer =
    static_cast<EventSubscriber *> (_tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

RemoteServersSet::EventSubscriber_ptr
RemoteServersSet::EventSubscriber::_narrow (
    ::CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<EventSubscriber>::narrow (
        _tao_objref,
        "IDL:RemoteServersSet/EventSubscriber:1.0",
        RemoteServersSet__TAO_EventSubscriber_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

RemoteServersSet::EventSubscriber_ptr
RemoteServersSet::EventSubscriber::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<EventSubscriber>::unchecked_narrow (
        _tao_objref,
        "IDL:RemoteServersSet/EventSubscriber:1.0",
        RemoteServersSet__TAO_EventSubscriber_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

RemoteServersSet::EventSubscriber_ptr
RemoteServersSet::EventSubscriber::_duplicate (EventSubscriber_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
RemoteServersSet::EventSubscriber::_tao_release (EventSubscriber_ptr obj)
{
  CORBA::release (obj);
}

::CORBA::Boolean
RemoteServersSet::EventSubscriber::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          value,
          "IDL:RemoteServersSet/EventSubscriber:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->ACE_NESTED_CLASS ( ::CORBA, Object)::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

const char* RemoteServersSet::EventSubscriber::_interface_repository_id (void) const
{
  return "IDL:RemoteServersSet/EventSubscriber:1.0";
}

::CORBA::Boolean
RemoteServersSet::EventSubscriber::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:76

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_RemoteServersSet_EventSubscriber (
    ::CORBA::tk_objref,
    "IDL:RemoteServersSet/EventSubscriber:1.0",
    "EventSubscriber");
  
namespace RemoteServersSet
{
  ::CORBA::TypeCode_ptr const _tc_EventSubscriber =
    &_tao_tc_RemoteServersSet_EventSubscriber;
}



// TAO_IDL - Generated from 
// be/be_visitor_exception/any_op_cs.cpp:50
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<RemoteServersSet::error>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;
    
    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    ACE_TRY_NEW_ENV
      {
        this->value_->_tao_decode (cdr ACE_ENV_ARG_PARAMETER);
        ACE_TRY_CHECK;
      }
    ACE_CATCHANY
      {
        return false;
      }
    ACE_ENDTRY;
    
    return true;
  }
}

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const RemoteServersSet::error &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RemoteServersSet::error>::insert_copy (
      _tao_any,
      RemoteServersSet::error::_tao_any_destructor,
      RemoteServersSet::_tc_error,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    RemoteServersSet::error *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RemoteServersSet::error>::insert (
      _tao_any,
      RemoteServersSet::error::_tao_any_destructor,
      RemoteServersSet::_tc_error,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    RemoteServersSet::error *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const RemoteServersSet::error *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const RemoteServersSet::error *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<RemoteServersSet::error>::extract (
        _tao_any,
        RemoteServersSet::error::_tao_any_destructor,
        RemoteServersSet::_tc_error,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:51
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<RemoteServersSet::Management>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RemoteServersSet
{
  
  
  // Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Management_ptr _tao_elem
    )
  {
    Management_ptr _tao_objptr =
      Management::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }
  
  // Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Management_ptr *_tao_elem
    )
  {
    TAO::Any_Impl_T<Management>::insert (
        _tao_any,
        Management::_tao_any_destructor,
        _tc_Management,
        *_tao_elem
      );
  }
  
  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      Management_ptr &_tao_elem
    )
  {
    return
      TAO::Any_Impl_T<Management>::extract (
          _tao_any,
          Management::_tao_any_destructor,
          _tc_Management,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    RemoteServersSet::Management_ptr _tao_elem
  )
{
  RemoteServersSet::Management_ptr _tao_objptr =
    RemoteServersSet::Management::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    RemoteServersSet::Management_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<RemoteServersSet::Management>::insert (
      _tao_any,
      RemoteServersSet::Management::_tao_any_destructor,
      RemoteServersSet::_tc_Management,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    RemoteServersSet::Management_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<RemoteServersSet::Management>::extract (
        _tao_any,
        RemoteServersSet::Management::_tao_any_destructor,
        RemoteServersSet::_tc_Management,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from 
// be/be_visitor_structure/any_op_cs.cpp:54


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const RemoteServersSet::Event &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<RemoteServersSet::Event *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<RemoteServersSet::Event>::insert_copy (
        _tao_any,
        RemoteServersSet::Event::_tao_any_destructor,
        RemoteServersSet::_tc_Event,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    RemoteServersSet::Event *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RemoteServersSet::Event>::insert (
      _tao_any,
      RemoteServersSet::Event::_tao_any_destructor,
      RemoteServersSet::_tc_Event,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    RemoteServersSet::Event *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const RemoteServersSet::Event *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const RemoteServersSet::Event *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<RemoteServersSet::Event>::extract (
        _tao_any,
        RemoteServersSet::Event::_tao_any_destructor,
        RemoteServersSet::_tc_Event,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:51
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<RemoteServersSet::EventListener>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RemoteServersSet
{
  
  
  // Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      EventListener_ptr _tao_elem
    )
  {
    EventListener_ptr _tao_objptr =
      EventListener::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }
  
  // Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      EventListener_ptr *_tao_elem
    )
  {
    TAO::Any_Impl_T<EventListener>::insert (
        _tao_any,
        EventListener::_tao_any_destructor,
        _tc_EventListener,
        *_tao_elem
      );
  }
  
  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      EventListener_ptr &_tao_elem
    )
  {
    return
      TAO::Any_Impl_T<EventListener>::extract (
          _tao_any,
          EventListener::_tao_any_destructor,
          _tc_EventListener,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    RemoteServersSet::EventListener_ptr _tao_elem
  )
{
  RemoteServersSet::EventListener_ptr _tao_objptr =
    RemoteServersSet::EventListener::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    RemoteServersSet::EventListener_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<RemoteServersSet::EventListener>::insert (
      _tao_any,
      RemoteServersSet::EventListener::_tao_any_destructor,
      RemoteServersSet::_tc_EventListener,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    RemoteServersSet::EventListener_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<RemoteServersSet::EventListener>::extract (
        _tao_any,
        RemoteServersSet::EventListener::_tao_any_destructor,
        RemoteServersSet::_tc_EventListener,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:51
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<RemoteServersSet::EventSubscriber>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RemoteServersSet
{
  
  
  // Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      EventSubscriber_ptr _tao_elem
    )
  {
    EventSubscriber_ptr _tao_objptr =
      EventSubscriber::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }
  
  // Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      EventSubscriber_ptr *_tao_elem
    )
  {
    TAO::Any_Impl_T<EventSubscriber>::insert (
        _tao_any,
        EventSubscriber::_tao_any_destructor,
        _tc_EventSubscriber,
        *_tao_elem
      );
  }
  
  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      EventSubscriber_ptr &_tao_elem
    )
  {
    return
      TAO::Any_Impl_T<EventSubscriber>::extract (
          _tao_any,
          EventSubscriber::_tao_any_destructor,
          _tc_EventSubscriber,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    RemoteServersSet::EventSubscriber_ptr _tao_elem
  )
{
  RemoteServersSet::EventSubscriber_ptr _tao_objptr =
    RemoteServersSet::EventSubscriber::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    RemoteServersSet::EventSubscriber_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<RemoteServersSet::EventSubscriber>::insert (
      _tao_any,
      RemoteServersSet::EventSubscriber::_tao_any_destructor,
      RemoteServersSet::_tc_EventSubscriber,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    RemoteServersSet::EventSubscriber_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<RemoteServersSet::EventSubscriber>::extract (
        _tao_any,
        RemoteServersSet::EventSubscriber::_tao_any_destructor,
        RemoteServersSet::_tc_EventSubscriber,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_cs.cpp:60
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RemoteServersSet::error &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.code)
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    RemoteServersSet::error &_tao_aggregate
  )
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.code)
  );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:63


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RemoteServersSet::Management_ptr _tao_objref
  )
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    RemoteServersSet::Management_ptr &_tao_objref
  )
{
  ::CORBA::Object_var obj;
  
  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::RemoteServersSet::Management RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        RemoteServersSet__TAO_Management_Proxy_Broker_Factory_function_pointer
      );
    
  return 1;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:61


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RemoteServersSet::Event &_tao_aggregate
  )
{
  return
    (strm << _tao_aggregate.status) &&
    (strm << _tao_aggregate.message.in ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    RemoteServersSet::Event &_tao_aggregate
  )
{
  return
    (strm >> _tao_aggregate.status) &&
    (strm >> _tao_aggregate.message.out ());
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:63


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RemoteServersSet::EventListener_ptr _tao_objref
  )
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    RemoteServersSet::EventListener_ptr &_tao_objref
  )
{
  ::CORBA::Object_var obj;
  
  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::RemoteServersSet::EventListener RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        RemoteServersSet__TAO_EventListener_Proxy_Broker_Factory_function_pointer
      );
    
  return 1;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:63


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RemoteServersSet::EventSubscriber_ptr _tao_objref
  )
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    RemoteServersSet::EventSubscriber_ptr &_tao_objref
  )
{
  ::CORBA::Object_var obj;
  
  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::RemoteServersSet::EventSubscriber RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        RemoteServersSet__TAO_EventSubscriber_Proxy_Broker_Factory_function_pointer
      );
    
  return 1;
}
TAO_END_VERSIONED_NAMESPACE_DECL



