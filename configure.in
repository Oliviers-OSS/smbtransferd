#                        -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_PREREQ(2.61)
AC_INIT(smbtransferd,2.2, oliviers.open.source.softwares@gmail.com)
AM_INIT_AUTOMAKE([dist-bzip2])
AC_CONFIG_SRCDIR([main.c])
AC_CONFIG_HEADER([config.h])
#AM_MAINTAINER_MODE

# Checks for programs.
AC_PROG_CC
AC_PROG_MAKE_SET
AC_PROG_INSTALL
AC_PROG_CXX

# Checks for libraries.
AC_CHECK_LIB(smbclient,smbc_init)
AC_CHECK_LIB(pthread,pthread_create)
AC_CHECK_LIB([dbgflags],registerDebugFlags)
AC_CHECK_LIB([rt],mq_open)

# Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_STDBOOL 
AC_HEADER_TIME 
AC_CHECK_HEADERS([sys/inotify.h fcntl.h stdint.h stdlib.h string.h unistd.h mqueue.h dbgflags/dbgflags.h dbgflags/loggers.h dbgflags/syslogex.h limits.h sys/time.h])
AC_LANG(C)
AC_MSG_CHECKING([whether sys/inotify.h actually works])
AC_COMPILE_IFELSE(
  AC_LANG_PROGRAM([[#include <sys/inotify.h>]],
                  [[return (-1 == inotify_init());]]
  ),
  [AC_MSG_RESULT([yes]); AC_DEFINE([SYS_INOTIFY_H_EXISTS_AND_WORKS],[1],[sys/inotify.h exists and works correctly])],
  [AC_MSG_WARN([nope, using inotify-tools'inotify headers file])]
)

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_TYPE_SSIZE_T
AC_TYPE_UINT32_T
AC_TYPE_SIGNAL
AC_TYPE_MODE_T
AC_TYPE_OFF_T 
AC_FUNC_ERROR_AT_LINE
AC_FUNC_STAT


# debug
AC_ARG_ENABLE(debug,
        [  --enable-debug Enable debug mode (default is no)],
        [case "${enableval}" in
         yes) enable_debug="yes";;
          no) enable_debug="no" ;;
           *) AC_MSG_ERROR(bad value ${enableval} for --enable-debug) ;;
         esac],
        [enable_debug="no"]
)
if test "$enable_debug" = "yes"; then
        AC_DEFINE(_DEBUG_, 1, [Defined if debug mode is enabled (its easier to check).])
        #CFLAGS="$CFLAGS -O0 -ggdb3"
fi
if test "$enable_debug" = "no"; then
        AC_DEFINE(NDEBUG, 1, [Defined if debug mode is disabled.])
fi

# function calls
#AC_ARG_ENABLE(calls-traces,
#         [  --enable-calls-traces Enable trace functions calls (default is no)],
#         [case "${enableval}" in
#         yes) enable_trace_functions_calls="yes";;
#          no) enable_trace_functions_calls="no" ;;
#           *) AC_MSG_ERROR(bad value ${enableval} for --enable-calls-traces) ;;
#         esac],
#        [enable_trace_functions_calls="no"]
#)

# with bin utils path
#AC_ARG_WITH(bin-utils-path,[  --with-bin-utils-path=<path> path to the bin utils root directory ])
#if test "x${withval}" != x; then
#   BFD_LIBRARY_LDFLAGS="-L ${withval}/bfd"
#   withval=""
#fi

#if test "$enable_trace_functions_calls" = "yes"; then
#        #LDFLAGS="$BFD_LIBRARY_LDFLAGS $LDFLAGS"
#        AC_DEFINE(TRACE_FUNCTIONS_CALLS, 1, [Defined if trace functions calls mode is enabled .])
#        AC_CHECK_HEADERS([bfd.h libiberty.h])
#        AC_CHECK_LIB(bfd,bfd_get_error)
#        AC_CHECK_LIB(iberty,cplus_demangle)
#fi
#AM_CONDITIONAL(FUNCTIONS_CALLS,[test x$enable_trace_functions_calls = xyes])

# CORBA servan
AC_ARG_ENABLE(corba,
        [  --enable-corba Enable CORBA control interface (default is no)],
        [case "${enableval}" in
         yes) enable_corba="yes";;
          no) enable_corba="no" ;;
           *) AC_MSG_ERROR(bad value ${enableval} for --enable-corba) ;;
         esac],
        [enable_corba="no"]
)
if test "$enable_corba" = "yes"; then        
        AC_DEFINE(CORBA_INTERFACE, 1, [Defined if CORBA interface is enabled.])
#AC_CHECK_LIB([ACE], [main])
#AC_CHECK_LIB([TAO], [main])
#AC_CHECK_LIB([TAO_CosNaming], [main])
#AC_CHECK_LIB([TAO_PortableServer], [main])
fi
AM_CONDITIONAL(CORBA_ENABLED,[test x$enable_corba = xyes])

AC_ARG_ENABLE(CORBA-kind,
              AS_HELP_STRING([--enable-CORBA-kind],[enable use of the kind attribut in CORBA Naming Service (default is yes)]),
	      [case "${enableval}" in
	       yes) enable_CORBA_kind="yes";;
	        no) enable_CORBA_kind="no";;
		*) AC_MSG_ERROR(bad value ${enableval} for --enable-CORBA-kind) ;;
	       esac],
	       [enable_CORBA_kind="yes"]
)
if test "$enable_CORBA_kind" = "no"; then
   AC_DEFINE(DISABLE_CORBA_NS_KIND,1,[Definable if the CORBA Naming Service Kind attribut must be empty.])
fi

AC_ARG_WITH([TAO-include-path],
  [AS_HELP_STRING([--with-TAO-include-path=DIR],[location of the TAO headers, defaults to (/usr/include)])],
  [TAO_CPPFLAGS="-I$withval"],
  [TAO_CPPFLAGS=""])
AC_SUBST(TAO_CPPFLAGS)

AC_ARG_WITH([TAO-libs-path],
  [AS_HELP_STRING([--with-TAO-libs-path=DIR],[location of the TAO libraries, defaults to (/usr/lib)])],
  [TAO_LIBS="-L$withval"],
  [TAO_LIBS=""])
AC_SUBST(TAO_LIBS)  

# pthread-rwlock
AC_ARG_ENABLE(pthread-rwlock, 
        [  --enable-pthread-rwlock Enable use of Reader/Writer locks (instead of mutex) (default is yes)],
        [case "${enableval}" in
         yes) enable_rwlock="yes";;
          no) enable_rwlock="no" ;;
           *) AC_MSG_ERROR(bad value ${enableval} for --enable-pthread-rwlock) ;;
         esac],
        [enable_rwlock="yes"]
)
if test "$enable_rwlock" = "yes"; then
        AC_DEFINE(_GNU_SOURCE, 1, [Defined to enable pthread-rwlock functions])
fi


# threads pool'size
AC_ARG_WITH(threads-pool-size,[  --with-threads-pool-size=<size> set threads pool'size])
if test "x${withval}" != x; then
   AC_DEFINE_UNQUOTED(THREADS_POOL_SIZE,${withval},[define threads pool'size.])
fi

# Checks for library functions.
AC_FUNC_CLOSEDIR_VOID
AC_FUNC_FORK
AC_FUNC_MALLOC
AC_FUNC_SELECT_ARGTYPES
AC_CHECK_FUNCS([atexit ftruncate pselect mkdir rmdir getcwd memset strchr strdup strrchr strtol strtoul strncasecmp strcasecmp gettimeofday select strerror strstr])

AC_CONFIG_FILES([Makefile tests/Makefile tests/corbaClt/Makefile])
AC_OUTPUT
