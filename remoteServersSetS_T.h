// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// be/be_codegen.cpp:520

#ifndef _TAO_IDL_REMOTESERVERSSETS_T_H_
#define _TAO_IDL_REMOTESERVERSSETS_T_H_



// TAO_IDL - Generated from 
// be/be_visitor_root/root_sth.cpp:116

namespace POA_RemoteServersSet
{
  
  // TAO_IDL - Generated from
  // be/be_visitor_interface/tie_sh.cpp:87
  
  // TIE class: Refer to CORBA v2.2, Section 20.34.4
  template <class T>
  class  Management_tie : public Management
  {
  public:
    Management_tie (T &t);
    // the T& ctor
    Management_tie (T &t, PortableServer::POA_ptr poa);
    // ctor taking a POA
    Management_tie (T *tp, ::CORBA::Boolean release = 1);
    // ctor taking pointer and an ownership flag
    Management_tie (
        T *tp,
        PortableServer::POA_ptr poa,
        ::CORBA::Boolean release = 1
      );
    // ctor with T*, ownership flag and a POA
    ~Management_tie (void);
    // dtor
    
    // TIE specific functions
    T *_tied_object (void);
    // return the underlying object
    void _tied_object (T &obj);
    // set the underlying object
    void _tied_object (T *obj, ::CORBA::Boolean release = 1);
    // set the underlying object and the ownership flag
    ::CORBA::Boolean _is_owner (void);
    // do we own it
    void _is_owner ( ::CORBA::Boolean b);
    // set the ownership
    
    // overridden ServantBase operations
    PortableServer::POA_ptr _default_POA (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/tie_sh.cpp:60
    
    char * currentServer (
        
      )
      ACE_THROW_SPEC ((
        ::CORBA::SystemException
      ));
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/tie_sh.cpp:60
    
    void currentServer (
        const char *
      )
      ACE_THROW_SPEC ((
        ::CORBA::SystemException
      ));
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/tie_sh.cpp:60
    
    ::CORBA::Boolean autoMoveMode (
        
      )
      ACE_THROW_SPEC ((
        ::CORBA::SystemException
      ));
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/tie_sh.cpp:60
    
    void autoMoveMode (
        ::CORBA::Boolean
      )
      ACE_THROW_SPEC ((
        ::CORBA::SystemException
      ));
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/tie_sh.cpp:60
    
    ::CORBA::Long currentCommStatus (
        
      )
      ACE_THROW_SPEC ((
        ::CORBA::SystemException
      ));
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/tie_sh.cpp:60
    
    ::CORBA::Long start (
        
      )
      ACE_THROW_SPEC ((
        ::CORBA::SystemException
      ));
  
  private:
    T *ptr_;
    PortableServer::POA_var poa_;
    ::CORBA::Boolean rel_;
    
    // copy and assignment are not allowed
    Management_tie (const Management_tie &);
    void operator= (const Management_tie &);
  };
  
  // TAO_IDL - Generated from
  // be/be_visitor_interface/tie_sh.cpp:87
  
  // TIE class: Refer to CORBA v2.2, Section 20.34.4
  template <class T>
  class  EventListener_tie : public EventListener
  {
  public:
    EventListener_tie (T &t);
    // the T& ctor
    EventListener_tie (T &t, PortableServer::POA_ptr poa);
    // ctor taking a POA
    EventListener_tie (T *tp, ::CORBA::Boolean release = 1);
    // ctor taking pointer and an ownership flag
    EventListener_tie (
        T *tp,
        PortableServer::POA_ptr poa,
        ::CORBA::Boolean release = 1
      );
    // ctor with T*, ownership flag and a POA
    ~EventListener_tie (void);
    // dtor
    
    // TIE specific functions
    T *_tied_object (void);
    // return the underlying object
    void _tied_object (T &obj);
    // set the underlying object
    void _tied_object (T *obj, ::CORBA::Boolean release = 1);
    // set the underlying object and the ownership flag
    ::CORBA::Boolean _is_owner (void);
    // do we own it
    void _is_owner ( ::CORBA::Boolean b);
    // set the ownership
    
    // overridden ServantBase operations
    PortableServer::POA_ptr _default_POA (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/tie_sh.cpp:60
    
    void notifyEvent (
        const ::RemoteServersSet::Event &
      )
      ACE_THROW_SPEC ((
        ::CORBA::SystemException
      ));
  
  private:
    T *ptr_;
    PortableServer::POA_var poa_;
    ::CORBA::Boolean rel_;
    
    // copy and assignment are not allowed
    EventListener_tie (const EventListener_tie &);
    void operator= (const EventListener_tie &);
  };
  
  // TAO_IDL - Generated from
  // be/be_visitor_interface/tie_sh.cpp:87
  
  // TIE class: Refer to CORBA v2.2, Section 20.34.4
  template <class T>
  class  EventSubscriber_tie : public EventSubscriber
  {
  public:
    EventSubscriber_tie (T &t);
    // the T& ctor
    EventSubscriber_tie (T &t, PortableServer::POA_ptr poa);
    // ctor taking a POA
    EventSubscriber_tie (T *tp, ::CORBA::Boolean release = 1);
    // ctor taking pointer and an ownership flag
    EventSubscriber_tie (
        T *tp,
        PortableServer::POA_ptr poa,
        ::CORBA::Boolean release = 1
      );
    // ctor with T*, ownership flag and a POA
    ~EventSubscriber_tie (void);
    // dtor
    
    // TIE specific functions
    T *_tied_object (void);
    // return the underlying object
    void _tied_object (T &obj);
    // set the underlying object
    void _tied_object (T *obj, ::CORBA::Boolean release = 1);
    // set the underlying object and the ownership flag
    ::CORBA::Boolean _is_owner (void);
    // do we own it
    void _is_owner ( ::CORBA::Boolean b);
    // set the ownership
    
    // overridden ServantBase operations
    PortableServer::POA_ptr _default_POA (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/tie_sh.cpp:60
    
    ::CORBA::ULong subscribe (
        ::RemoteServersSet::EventListener_ptr,
        ::CORBA::ULong
      )
      ACE_THROW_SPEC ((
        ::CORBA::SystemException
      ));
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/tie_sh.cpp:60
    
    ::CORBA::ULong unsubscribe (
        ::RemoteServersSet::EventListener_ptr
      )
      ACE_THROW_SPEC ((
        ::CORBA::SystemException
      ));
  
  private:
    T *ptr_;
    PortableServer::POA_var poa_;
    ::CORBA::Boolean rel_;
    
    // copy and assignment are not allowed
    EventSubscriber_tie (const EventSubscriber_tie &);
    void operator= (const EventSubscriber_tie &);
  };
} // module RemoteServersSet

// TAO_IDL - Generated from 
// be/be_codegen.cpp:1251
#if defined (__ACE_INLINE__)
#include "remoteServersSetS_T.inl"
#endif /* defined INLINE */

#if defined (ACE_TEMPLATES_REQUIRE_SOURCE)
#include "remoteServersSetS_T.cpp"
#endif /* defined REQUIRED SOURCE */

#if defined (ACE_TEMPLATES_REQUIRE_PRAGMA)
#pragma implementation ("remoteServersSetS_T.cpp")
#endif /* defined REQUIRED PRAGMA */

#endif /* ifndef */

